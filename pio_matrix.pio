.program ws2812

.wrap_target
    out x, 1          ; Lê um bit do registrador de deslocamento (OSR) para o registrador X
    jmp !x do_zero    ; Se o bit for 0, pula para a rotina do_zero
do_one:
    set pins, 1 [4]   ; Define o pino como alto por 5 ciclos (1 bit "1" para WS2812)
    jmp cont          ; Pula para a rotina de continuação
do_zero:
    set pins, 1 [2]   ; Define o pino como alto por 3 ciclos (1 bit "0" para WS2812)
    set pins, 0 [2]   ; Define o pino como baixo por 2 ciclos
cont:
    set pins, 0 [1]   ; Define o pino como baixo por 1 ciclo (tempo de espera entre bits)
.wrap

% c-sdk {
static inline void pio_matrix_program_init(PIO pio, uint sm, uint offset, uint pin)
{
    pio_sm_config c = pio_matrix_program_get_default_config(offset);

    // Set pin to be part of set output group, i.e. set by set instruction
    sm_config_set_set_pins(&c, pin, 1);

    // Attach pio to the GPIO
    pio_gpio_init(pio, pin);

    // Set pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Set pio clock to 8MHz, giving 10 cycles per LED binary digit
    float div = clock_get_hz(clk_sys) / 8000000.0;
    sm_config_set_clkdiv(&c, div);

    // Give all the FIFO space to TX (not using RX)
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Shift to the left, use autopull, next pull threshold 24 bits
    sm_config_set_out_shift(&c, false, true, 24);

    // Set sticky-- continue to drive value from last set/out.  Other stuff off.
    sm_config_set_out_special(&c, true, false, false);

    // Load configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    
    // enable this pio state machine
    pio_sm_set_enabled(pio, sm, true);
}
%}